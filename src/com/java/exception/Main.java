package com.java.exception;

import java.sql.SQLException;

public class Main {
	
	public static void main(String[] args) {
		int var1 = 20;
		int var2 = 0;

		// JVM : ArithmeticException
		// java.lang.ArithmeticException
		// dividing by 0
		// System.out.println(var1/var2);

	//	System.out.println("Exit");

		// String var = "Hello";
		// NullPointerException
		// String var = null;

		// callMe(var);

		// ClassCastException
		// Object obj = "Test";
		Object obj = 23;

		// Converting to string
		// integer to string, not working
		// String str = (String) obj;
		// System.out.println(str);

		// String to Integer
		// String str1 ="23";
		// String str1 = "ffff";
		// NumberFormatException
		// Integer var = Integer.parseInt(str1);
		// System.out.println(var);

	//	System.out.println("Exit");
		
		// handled it here
	//	try{
		callMe();
	}
	//	}catch (Exception e){
			//System.out.println("Error");
		//}
	//	System.out.println("End");}

	// only throws exception, similar to handling, line after executed.
	//static void callMe(int index) throws ArrayIndexOutOfBoundsException {
	//	try {
		//	int arr[] = { 23, 45 };
			// ArrayIndexOutOfBoundsException
		//	System.out.println(arr[index]);
			// after this exception, nothing follow will execute

			// if try catch: then following code will be executed.
			// throw

			// Thread.sleep(2000)
		//} catch (ArrayIndexOutOfBoundsException e) {
		//	System.out.println("Error");
		//}
		
	//	System.out.println("Start");
		
		// if do not know how to handle, use throws
		// but then throws should add to another method
		// if use try, then once for all
	/**	try {
			Thread.sleep(6000);
		} catch (InterruptedException e) {
			e.printStackTrace();
			System.out.println("Error");
		}
		
		System.out.println("End");

	}*/
	
	// Exception
	// Unchecked exception: happen by developers' mistake,
	// JVM no warning, compile no exception, without handling the exception
	// ArithmeticException, NullPointerException
	// ClassCastException, NumberFormatException
	// ArrayIndexOutofBoundException

	// Checked exception: have to handle the exception before compile
	// SQLException, FileNotFoundException
	
	// JVM Stops everything, program
	// must self handling checked exception
	
	//Throwable: super class of all exception class
	//1,Error: cannot handle writing code, too serious: connecting server
	//2, Exception: RuntimeException: can be handled
	
	static void callMe(){
		int x = 20;
		int y = 0;
		
		//Exception generated by JVM, then JVM throws exception, 
		//then JVM ended the program
		//System.out.println(x/y);
		//throw new ArithmeticException();
		
		//must handle
		try {
			// this can be child exception
			throw new InterruptedException();
		} catch (InterruptedException e) {// this can be super exception
			e.printStackTrace();
		}
		
		try {
			throw new MyException();
		} catch (MyException e) {
			e.printStackTrace();
		}
		
		throw new MyException1();
		
	}
}


//RuntimeException: unchecked exception
//sql exception
//file not found exception

// so MyException is checked, must be handled
class MyException extends SQLException {

	int a = 1;
	
	void check(){
	// multiple exceptions
	try{
		throw new SQLException();		
		//child
	}catch(SQLException e){		
		//parent
	}catch(Exception e1){
		
	}
}
}

// unchecked
class MyException1 extends RuntimeException{

}